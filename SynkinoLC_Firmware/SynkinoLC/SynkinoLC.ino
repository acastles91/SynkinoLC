#include <Arduino.h>

#include <SPI.h>
#include <U8g2lib.h>
#include <Adafruit_VS1053.h>
#include <SD.h>
#include <EncoderTool.h>
using namespace EncoderTool;

#define SPI_MOSI         1
#define SPI_MISO        12
#define SPI_SCK         14

#define OLED_DC          8
#define OLED_CS         10
#define OLED_RST         9

#define BREAKOUT_RST    16  // VS1053 reset pin (output)
#define BREAKOUT_CS     15  // VS1053 chip select pin (output)
#define BREAKOUT_DCS    20  // VS1053 Data/command select pin (output)
#define CARDCS          21  // SD Card chip select pin
#define DREQ             3  // VS1053 Data request, ideally an Interrupt pin

#define logo_xbm_width  96
#define logo_xbm_height 34
#define logo_xbm_x      14
#define logo_xbm_y      20
static const unsigned char logo_xbm_bits[] U8X8_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0x03,
  0x00, 0x1f, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x0e,
  0xc0, 0x60, 0x00, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x0e, 0x38, 0xe0, 0x30,
  0x30, 0x08, 0x80, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0e, 0x38, 0xe0, 0x40,
  0x08, 0x14, 0x9f, 0xff, 0xff, 0xff, 0xff, 0x5f, 0x00, 0x00, 0x00, 0x80,
  0x04, 0x14, 0x8f, 0x0f, 0xec, 0xdb, 0xef, 0x4d, 0x4e, 0x20, 0x3c, 0xc0,
  0x04, 0x14, 0x87, 0xf7, 0xef, 0x9b, 0xef, 0x5d, 0xc4, 0x20, 0x42, 0xc0,
  0x02, 0x14, 0x8b, 0xfb, 0xdf, 0x9d, 0xef, 0x2d, 0xc4, 0x20, 0x42, 0x80,
  0x02, 0x0e, 0x89, 0xfb, 0xdf, 0x5d, 0xef, 0x3d, 0x44, 0x21, 0x81, 0x80,
  0x01, 0x05, 0x90, 0xfb, 0xbf, 0x5e, 0xef, 0x1d, 0x44, 0x21, 0x81, 0x80,
  0x01, 0x05, 0x90, 0xf7, 0x7f, 0xdf, 0xee, 0x15, 0x44, 0x22, 0x81, 0x80,
  0x81, 0x04, 0x90, 0x0f, 0x7f, 0xdf, 0xee, 0x09, 0x44, 0x22, 0x81, 0x40,
  0x81, 0x1e, 0x90, 0xff, 0x7e, 0xdf, 0xed, 0x19, 0x44, 0x24, 0x81, 0x40,
  0x81, 0x26, 0x90, 0xff, 0x7d, 0xdf, 0xeb, 0x05, 0x44, 0x28, 0x81, 0x40,
  0x92, 0x24, 0x88, 0xff, 0x7d, 0xdf, 0xeb, 0x2d, 0x44, 0x28, 0x81, 0x40,
  0x1a, 0x15, 0x88, 0xff, 0x7d, 0xdf, 0xe7, 0x2d, 0x44, 0x30, 0x42, 0x40,
  0x1c, 0x1e, 0x84, 0xff, 0x7e, 0xdf, 0xe7, 0x5d, 0x44, 0x30, 0x42, 0x40,
  0x1e, 0x05, 0x84, 0x03, 0x7f, 0xdf, 0xef, 0x4d, 0x4e, 0x20, 0x3c, 0x40,
  0x1f, 0x05, 0x82, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x00, 0x00, 0x00, 0x40,
  0x00, 0x82, 0x81, 0xff, 0xff, 0xff, 0xff, 0xcf, 0x00, 0x00, 0x00, 0x40,
  0xc0, 0x60, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x43,
  0x00, 0x1f, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x3f, 0x02, 0xfe, 0x0f, 0x4e,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x1f, 0x70,
  0x00, 0x00, 0x2a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfb, 0x18, 0x40,
  0x00, 0x00, 0x21, 0x40, 0x00, 0x00, 0x00, 0x00, 0x81, 0x7b, 0x37, 0x20,
  0x00, 0x00, 0x2b, 0x4b, 0x9d, 0x0d, 0x67, 0x07, 0x82, 0x7b, 0x3f, 0x10,
  0x00, 0x00, 0x29, 0xd5, 0x54, 0x14, 0x15, 0x05, 0x9c, 0x7b, 0x3f, 0x0c,
  0x00, 0x00, 0x49, 0x55, 0x5d, 0x54, 0x17, 0x07, 0xa0, 0x7b, 0xbf, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x7b, 0x37, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xc3, 0x18, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x1f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x0f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x07, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00
};

Adafruit_VS1053_FilePlayer musicPlayer =
  Adafruit_VS1053_FilePlayer(BREAKOUT_RST, BREAKOUT_CS, BREAKOUT_DCS, DREQ, CARDCS);

U8G2_SSD1306_128X64_NONAME_1_4W_HW_SPI u8g2(U8G2_R0, OLED_CS, OLED_DC, OLED_RST);

Encoder encoder;

void setup(void) {

  // set HW SPI pins (in case we go for alternative pins)
  SPI.setMOSI(SPI_MOSI);
  SPI.setMISO(SPI_MISO);
  SPI.setSCK(SPI_SCK);

  u8g2.begin();
  u8g2.setFont(u8g2_font_helvR10_tr);
  u8g2.firstPage();
  do {
    u8g2.drawXBMP(logo_xbm_x, logo_xbm_y, logo_xbm_width, logo_xbm_height, logo_xbm_bits);
  } while (u8g2.nextPage());
  delay(2000);

  encoder.begin(5, 6);

  musicPlayer.begin();
  SD.begin(CARDCS);
  musicPlayer.setVolume(20, 20);
  musicPlayer.useInterrupt(VS1053_FILEPLAYER_PIN_INT);
  musicPlayer.startPlayingFile("/track001.mp3");
}

void loop(void) {
  if (encoder.valueChanged()) {
    u8g2.firstPage();
    do {
      u8g2.setFont(u8g2_font_ncenB14_tr);
      u8g2.setCursor(4, 40);
      u8g2.print(u8x8_u8toa(encoder.getValue(), 1));
    } while (u8g2.nextPage());
  }
}
